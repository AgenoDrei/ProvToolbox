//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.07.25 at 11:38:35 AM BST 
//


package org.openprovenance.prov.xml;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import javax.xml.namespace.QName;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.builder.JAXBEqualsBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBHashCodeBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBToStringBuilder;
import org.openprovenance.prov.model.DOMProcessing;
import org.openprovenance.prov.model.Attribute.AttributeKind;

import java.util.Map;
import java.util.HashMap;

/**
 * <p>Java class for Location complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Location">
 *   &lt;simpleContent>
 *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>anySimpleType">
 *       &lt;attribute name="type" type="{http://www.w3.org/2001/XMLSchema}QName" />
 *     &lt;/extension>
 *   &lt;/simpleContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TypedValue", namespace = "http://www.w3.org/ns/prov#", propOrder = {
   "value"
})
public class TypedValue   

    implements Equals, HashCode, ToString, org.openprovenance.prov.model.TypedValue
{
    

    @XmlValue
    @XmlSchemaType(name = "anySimpleType")
    protected Object value;
    
    @XmlAttribute(name = "type", namespace = "http://www.w3.org/2001/XMLSchema-instance")
    protected QName type;

    @XmlAnyAttribute
    protected Map<QName, String> attributes=new HashMap<QName, String>();


    transient protected Object valueAsJava;

    /* (non-Javadoc)
     * @see org.openprovenance.prov.xml.TypIN#getValue()
     */
    @Override
    public Object getValue() {
        return value;
    }

    /* (non-Javadoc)
     * @see org.openprovenance.prov.xml.TypIN#setValue(java.lang.Object)
     */
    @Override
    public void setValue(Object value) {
        this.value = value;
    }



    public Map<QName, String> getAttributes() {
        return attributes;
    }

    public void setAttributes(Map<QName, String> attributes) {
        this.attributes = attributes;
    }

    /* (non-Javadoc)
     * @see org.openprovenance.prov.xml.TypIN#getType()
     */
    @Override
    public QName getType() {
        return type;
    }

    /* (non-Javadoc)
     * @see org.openprovenance.prov.xml.TypIN#getValueAsJava(org.openprovenance.prov.xml.ValueConverter)
     */
    @Override
    public Object getValueAsJava(org.openprovenance.prov.model.ValueConverter vconv) {
    	if (valueAsJava==null) {
    		valueAsJava=vconv.convertToJava(getType(), (String)value);
    	}
        return valueAsJava;
    }


    /* (non-Javadoc)
     * @see org.openprovenance.prov.xml.TypIN#setValueAsJava(java.lang.Object)
     */
    @Override
    public void setValueAsJava(Object valueAsJava) {
	if (valueAsJava!=null) {
	    if (valueAsJava instanceof QName) {
		QName q=(QName) valueAsJava;
		//this.value=q.getPrefix()+":"+q.getLocalPart();
		this.value=q;
	    } else if (valueAsJava instanceof byte[]) {
	        this.value=valueAsJava;
	    } else if (valueAsJava instanceof org.w3c.dom.Element) {
	        this.value=valueAsJava;
	    } else {
		this.value = valueAsJava.toString();
	    }
	}
        this.valueAsJava = valueAsJava;
    }

    /*
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link QName }
     *     
     */
    /* (non-Javadoc)
     * @see org.openprovenance.prov.xml.TypIN#setType(javax.xml.namespace.QName)
     */
    @Override
    public void setType(QName value) {
        this.type = value;
    }

    //TODO: need to check types.

    public void equals(Object object, EqualsBuilder equalsBuilder) {
        if (!(object instanceof TypedValue)) {
            equalsBuilder.appendSuper(false);
            return ;
        }
        if (this == object) {
            return ;
        }
        final TypedValue that = ((TypedValue) object);
        if ((this.getValue() instanceof org.w3c.dom.Element)
                && 
                (that.getValue() instanceof org.w3c.dom.Element)) {
            try {
        	final org.w3c.dom.Element thisEl=((org.w3c.dom.Element)this.getValue());
        	final org.w3c.dom.Element thatEl=((org.w3c.dom.Element)that.getValue());
        	thisEl.normalize();
        	thatEl.normalize();
                final String s1=DOMProcessing.writeToString(thisEl);
                final String s2=DOMProcessing.writeToString(thatEl);
                System.out.println("*** Comparing " + s1);
                System.out.println("*** Comparing " + s2);
                equalsBuilder.append(s1,s2);
            } catch(Exception e) {
                equalsBuilder.append(this.getValue(), that.getValue());
            }
        } else {
            equalsBuilder.append(this.getValue(), that.getValue());
        }
        equalsBuilder.append(this.getType(), that.getType());
    }

    public boolean equals(Object object) {
        if (!(object instanceof TypedValue)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final EqualsBuilder equalsBuilder = new JAXBEqualsBuilder();
        equals(object, equalsBuilder);
        return equalsBuilder.isEquals();
    }

    public void hashCode(HashCodeBuilder hashCodeBuilder) {
        hashCodeBuilder.append(this.getValue());
        hashCodeBuilder.append(this.getType());
    }

    public int hashCode() {
        final HashCodeBuilder hashCodeBuilder = new JAXBHashCodeBuilder();
        hashCode(hashCodeBuilder);
        return hashCodeBuilder.toHashCode();
    }

    public void toString(ToStringBuilder toStringBuilder) {
        {
            Object theValue;
            theValue = this.getValue();
            toStringBuilder.append("value", theValue);
        }
        {
            QName theType;
            theType = this.getType();
            toStringBuilder.append("type", theType);
        }
    }

    public String toString() {
        final ToStringBuilder toStringBuilder = new JAXBToStringBuilder(this);
        toString(toStringBuilder);
        return toStringBuilder.toString();
    }



    
    public QName getQName(AttributeKind kind) {
        switch (kind) {
        case  PROV_TYPE: return Attribute.PROV_TYPE_QNAME;
        case  PROV_LABEL: return Attribute.PROV_LABEL_QNAME;
        case  PROV_VALUE: return Attribute.PROV_VALUE_QNAME;
        case  PROV_LOCATION: return Attribute.PROV_LOCATION_QNAME;
        case  PROV_ROLE: return Attribute.PROV_ROLE_QNAME;
        case OTHER:
        default: 
                return null;
        }
    }
    
    /* (non-Javadoc)
     * @see org.openprovenance.prov.xml.AttrIN#getAttributeKind(javax.xml.namespace.QName)
     */
    
    public AttributeKind getAttributeKind(QName q) {
        if (q.equals(Attribute.PROV_TYPE_QNAME)) return AttributeKind.PROV_TYPE;
        if (q.equals(Attribute.PROV_LABEL_QNAME)) return AttributeKind.PROV_LABEL;
        if (q.equals(Attribute.PROV_VALUE_QNAME)) return AttributeKind.PROV_VALUE;
        if (q.equals(Attribute.PROV_LOCATION_QNAME)) return AttributeKind.PROV_LOCATION;
        if (q.equals(Attribute.PROV_ROLE_QNAME)) return AttributeKind.PROV_ROLE;
        return AttributeKind.OTHER;
    }



}
