package org.openprovenance.prov.asn;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Hashtable;

import  org.antlr.runtime.CommonTokenStream;
import  org.antlr.runtime.ANTLRFileStream;
import  org.antlr.runtime.CharStream;
import  org.antlr.runtime.Token;
import  org.antlr.runtime.tree.Tree;
import  org.antlr.runtime.tree.CommonTree;
import  org.antlr.runtime.tree.CommonTreeAdaptor;
import  org.antlr.runtime.tree.TreeAdaptor;

/* Class to traverse the syntax tree generated by parser, invoking constructor methods. */

public class Traversal {

    private TreeConstructor c;
    public Traversal(TreeConstructor c) {
        this.c=c;
    }
            

    public String getTokenString(Tree t) {
        if (t==null) return null;
        return ((CommonTree)t).getToken().getText();
    }

    public String convertToken(String token) {
        return token;
    }
    
    public Object convert(Tree ast) {
        switch(ast.getType()) {
        case ASNParser.ACTIVITY:
            Object id=convert(ast.getChild(0));
            Object recipe=convert(ast.getChild(1));
            Object startTime=convert(ast.getChild(2));
            Object endTime=convert(ast.getChild(3));
            Object aAttrs=convert(ast.getChild(4));
            return c.convertActivity(id,recipe,startTime,endTime,aAttrs);

        case ASNParser.ENTITY:
            id=convert(ast.getChild(0));
            Object eAttrs=convert(ast.getChild(1));
            return c.convertEntity(id,eAttrs);

        case ASNParser.AGENT:
            id=convert(ast.getChild(0));
            Object agAttrs=convert(ast.getChild(1));
            return c.convertAgent(id,agAttrs);

        case ASNParser.CONTAINER:
            List<Object> records=new LinkedList();
            for (int i=0; i< ast.getChildCount(); i++) {
                Object o=convert(ast.getChild(i));
                records.add(o);
            }
            return c.convertContainer(records);

        case ASNParser.ATTRIBUTES:
            List<Object> attributes=new LinkedList();
            for (int i=0; i< ast.getChildCount(); i++) {
                attributes.add(convert(ast.getChild(i)));
            }
            return c.convertAttributes(attributes);
        case ASNParser.ID:
            return c.convertId(convertToken(getTokenString(ast.getChild(0))));


        case ASNParser.ATTRIBUTE:
            Object attr1=convertToken(getTokenString(ast.getChild(0)));
            Object val1=convert(ast.getChild(1));
            return c.convertAttribute(attr1,val1);

        case ASNParser.START:
            return c.convertStart(convertToken(getTokenString(ast.getChild(0))));

        case ASNParser.END:
            return c.convertEnd(convertToken(getTokenString  (ast.getChild(0))));

        case ASNParser.A:
            if (ast.getChildCount()==0) {
                return c.convertA(null);
            } else {
                return c.convertA(convert(ast.getChild(0)));
            }
        case ASNParser.U:
            if (ast.getChildCount()==0) {
                return c.convertU(null);
            } else {
                return c.convertU(convert(ast.getChild(0)));
            }
        case ASNParser.G:
            if (ast.getChildCount()==0) {
                return c.convertG(null);
            } else {
                return c.convertG(convert(ast.getChild(0)));
            }

        case ASNParser.STRING:
            return c.convertString(convertToken(getTokenString(ast.getChild(0))));
	    
 	case ASNParser.QNAM:
 	    return c.convertQNAME(convertToken(getTokenString(ast.getChild(0))));

 	case ASNParser.IRI:
 	    String iri=convertToken(getTokenString(ast.getChild(0)));
 	    return c.convertIRI(iri);

 	case ASNParser.TYPEDLITERAL:
 	    String v1=convertToken(getTokenString(ast.getChild(0)));
 	    Object v2=convert(ast.getChild(1));
 	    return c.convertTypedLiteral(v1,v2);


        case ASNParser.USED:
            Tree uidTree=ast.getChild(0);
            if (uidTree.getChildCount()>0) {
                uidTree=uidTree.getChild(0);
            }
            Object uid=convert(uidTree);
            Object id2=convert(ast.getChild(1));
            Object id1=convert(ast.getChild(2));
            Object time=convert(ast.getChild(3));
            Object rAttrs=convert(ast.getChild(4));
            return c.convertUsed(uid, id2,id1,time,rAttrs);

        case ASNParser.WGB:
            uidTree=ast.getChild(0);
            if (uidTree.getChildCount()>0) {
                uidTree=uidTree.getChild(0);
            }
            uid=convert(uidTree);
            id2=convert(ast.getChild(1));
            id1=(convert(ast.getChild(2)));
            time=convert(ast.getChild(3));
            rAttrs=convert(ast.getChild(4));
            return c.convertWasGeneratedBy(uid,id2,id1,time,rAttrs);

        case ASNParser.WDF:
            id2=convert(ast.getChild(0));
            id1=convert(ast.getChild(1));
            Object pe=convert(ast.getChild(2));
            Object q2=convert(ast.getChild(3));
            Object q1=convert(ast.getChild(4));
            return c.convertWasDerivedFrom(id2,id1,pe,q2,q1);



            // ...handle every other possible node type in the AST...
        case ASNParser.TIME:
            if (ast.getChildCount()==0) return null;
            if (ast.getChild(0)==null) return null;
            return getTokenString(ast.getChild(0));
        }

        return null;
    }


}

